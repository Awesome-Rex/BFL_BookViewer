// @use "../../helpers" as helpers;
@use "../../helpers/functions";
// @use "../../helpers/functions" as functions;

//https://youtu.be/3R4fpnIAozs?list=PL1sJZ9qwpVPbPqM5dTnP_L1R96eaoQhNK
//https://www.w3schools.com/howto/howto_css_media_query_breakpoints.asp

$breakpoints: (
    xs: 0,          //extra small       (phones)
    sm: 480px,      //small             (large phones, tablets)
    md: 720px,      //medium            (large tablets)
    lg: 960px,      //large             (laptops, desktops)
    xl: 1200px,     //extra large       (large laptops, large desktops) 
    gg: 1400px      //gigantic          (TVs)
);

// @function get-min($breakpoint) {
//     @return map-get($breakpoints, $breakpoint);
// }

// @function get-max($breakpoint, $decrement: true) {
//     $index: map-index($breakpoints, $breakpoint) + 1;
//     @if ($index > map-length($breakpoints)) {
//         $index: map-length($breakpoints);
//     }

//     $point: map-nth($breakpoints, $index, true);
//     @if ($decrement == true) {
//         $point: $point - 1;
//     }

//     @return $point;
// }

@function get-avg($breakpoint) {
    @return (get-min($breakpoint) + get-max($breakpoint, null)) / 2;
}

@function get-min($breakpoint) {
    @return map-get($breakpoints, $breakpoint);
}

@function get-max($breakpoint, $decrement: true) {
    $index: functions.map-index($breakpoints, $breakpoint) + 1;
    @if ($index > functions.map-length($breakpoints)) {
        $index: functions.map-length($breakpoints);
    }

    $point: functions.map-nth($breakpoints, $index, true);
    @if ($decrement == true) {
        $point: $point - 1;
    }

    @return $point;
}