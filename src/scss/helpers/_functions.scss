@use "sass:meta";

@use "./variables";

//MAP FUNCTIONS
@function map-length($map){
    @return length(map-keys($map));
}

@function map-index($map, $item, $use-value: null) {
    @if ($use-value == null) {
        @return index(map-keys($map), $item);
    } @else {
        @return index(map-values($map), $item);
    }
}

@function map-nth($map, $n, $use-value: null) {
    @if ($use-value == null) {
        @return nth(map-keys($map), $n);
    } @else {
        @return nth(map-values($map), $n);
    }
}

// @function map-set-nth($map, $n, $item, $use-value: null) {
//     @if ($use-value == null) {
        
//     } @else {

//     }
// }

//STRING FUNCTIONS
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function str-split($string, $separator, $exclude-pre: null, $exclude-post: null) {
    $initial-string: $string;
    
    $split-arr: (); // empty array/list
    


    $index : str-index($string, $separator); // first index of separator in string
    $last-index: null;
    @while ($index != null and $index != $last-index and $index <= str-length($string)) { // loop through string
        // @debug "#{$index} / #{str-length($string)} [#{$string}]";
        $pre: str-slice($string, 1, $index - 1); //before seperator
        $post: str-slice($string, $index + str-length($separator)); //after seperator

        $pass-pre: $exclude-pre == null or ($exclude-pre != null and meta.call($exclude-pre, $pre));
        $pass-post: $exclude-post == null or ($exclude-post != null and meta.call($exclude-post, $post));
        $pass: $pass-pre and $pass-post;



        @if ($pass == true) {
            $item: $pre; // get the substring from the first character to the separator
            $string: $post; // remove item and separator from string

            $split-arr: append($split-arr, $item); // push item to array

            
            $last-index: $index;
            $index : str-index($string, $separator); // find new index of separator
        } @else {
            $last-index: $index;
            // $index : str-index($post, $separator); // find new index of separator
            $index : str-index($post, $separator); // find new index of separator
            @if ($index != null) {
                $index: str-length($pre) + $index;
            }
            // @debug $index;
        }
    }



    //{
        $split-arr: append($split-arr, $string); // add the remaining string to list (the last item)
    //}



    @return $split-arr;
}
// @function str-split($string, $separator) {
//     // empty array/list
//     $split-arr: ();
//     // first index of separator in string
//     $index : str-index($string, $separator);
//     // loop through string
//     @while $index != null {
//         // get the substring from the first character to the separator
//         $item: str-slice($string, 1, $index - 1);
//         // push item to array
//         $split-arr: append($split-arr, $item);
//         // remove item and separator from string
//         $string: str-slice($string, $index + str-length($separator));
//         // find new index of separator
//         $index : str-index($string, $separator);
//     }
//     // add the remaining string to list (the last item)
//     $split-arr: append($split-arr, $string);

//     @return $split-arr;
// }

@function str-reverse($string) {
    $reverse-string: "";
    @for $i from 1 through str-length($string) {
        $c: str-slice($string, $i, $i);
        $reverse-string: "#{$c}#{$reverse-string}";
    }
    @return $reverse-string;
}

//SELECTOR FUNCTIONS
@function opening($string) {
    $string: str-reverse($string);



    @if (str-index($string, "(") != null) {
        @if (str-index($string, ")") != null) {
            @if (str-index($string, "(") < str-index($string, ")")) {
                @return false;
            }
        } @else {
            @return false;
        }
    }
    @if (str-index($string, "[") != null) {
        @if (str-index($string, "]") != null) {
            @if (str-index($string, "[") < str-index($string, "]")) {
                @return false;
            }
        } @else {
            @return false;
        }
    }

    @if (str-index($string, ">") != null and str-index($string, ">") == 1) {
        @return false;
    }
    @if (str-index($string, "+") != null and str-index($string, "+") == 1) {
        @return false;
    }
    @if (str-index($string, "~") != null and str-index($string, "~") == 1) {
        @return false;
    }
    @if (str-index($string, ":") != null and str-index($string, ":") == 1) {
        @return false;
    }
    @if (str-index($string, "::") != null and str-index($string, "::") == 1) {
        @return false;
    }

    @return true;
}
@function closing($string) {
    @if (str-index($string, ")") != null) {
        @if (str-index($string, "(") != null) {
            @if (str-index($string, ")") < str-index($string, "(")) {
                @return false;
            }
        } @else {
            @return false;
        }
    }
    @if (str-index($string, "]") != null) {
        @if (str-index($string, "[") != null) {
            @if (str-index($string, "]") < str-index($string, "[")) {
                @return false;
            }
        } @else {
            @return false;
        }
    }

    @if (str-index($string, " ") != null and str-index($string, " ") == 1) {
        @return false;
    }

    @return true;
}
//function between: selector-parse() <---> simple-selector()
@function selector-split($selector) {
    @return str-split(inspect($selector), " ", meta.get-function("opening"), meta.get-function("closing"));
}