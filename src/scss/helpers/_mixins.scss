@use "./variables";
@use "./functions";

//CUSTOM ELEMENT SELECTOR

//selector (a b, c d) --> parse (a b) (c d) --> element ((a) (b)) ((c) (d))
@mixin custom-selector($rule, $selectors: "@at-root #{&}") {
    $at-root: false;
    @if (str-index($selectors, "@at-root") != null) {
        $at-root:true;

        $selectors: str-slice($selectors, str-length("@at-root") + 2);
    }

    @each $parse in selector-parse($selectors) { //split commas (a, b) => (a) (b)
        // @debug "======================================================";
        // @debug "BEFORE --- [#{$parse}]";
        $parse: functions.selector-split($parse);
        // @debug "AFTER --- [#{$parse}]";
        // @debug length($parse);

        @for $selector-index from 1 through length($parse) { //split nested (a b) => (a) (b)
            // @debug "-------------------";
            // @debug "[#{$parse}] (#{length($parse)})";
            $selector: nth($parse, $selector-index);

            $new-parse-1: "*";
            $new-parse-2: "*";
            @for $element-index from 1 through length($parse) { //split nested (a b) => (a) (b)
                $element: nth($parse, $element-index);
                
                @if ($selector-index == $element-index) {
                    $element-1: selector-unify("*", $rule);
                    $element-2: selector-unify($element, $rule);
                    
                    @if ($element-1 != null) {
                        $new-parse-1: selector-nest(selector-nest($new-parse-1, $element-1), $element);
                    }
                    @if ($element-2 != null) {
                        $new-parse-2: selector-nest($new-parse-2, $element-2);
                    }
               } @else {
                    $new-parse-1: selector-nest($new-parse-1, $element);
                    $new-parse-2: selector-nest($new-parse-2, $element);
                }
            }

            @each $new-selector-1 in $new-parse-1 {
                $new-selector-1: str-slice(inspect($new-selector-1), str-length("*") + 2);
            
                // @debug $new-selector-1;

                @if ($at-root == false) {
                    #{unquote(#{$new-selector-1})} {
                        @content;
                    }
                } @else if ($at-root == true) {
                    @at-root #{unquote(#{$new-selector-1})} {
                        @content;
                    }
                }
            }
            @each $new-selector-2 in $new-parse-2 {
                $new-selector-2: str-slice(inspect($new-selector-2), str-length("*") + 2);
            
                // @debug $new-selector-2;

                @if ($at-root == false) {
                    #{unquote(#{$new-selector-2})} {
                        @content;
                    }
                } @else if ($at-root == true) {
                    @at-root #{unquote(#{$new-selector-2})} {
                        @content;
                    }
                }
            }
        }
    }
}

//BREAKPOINT SELECTOR
@mixin custom-breakpoint($amount: 0, $below: null) {
    @if ($below == null) {
        @media screen and (min-width: $amount) {
            @content;
        }
    } @else {
        @media screen and (max-width: $amount) {
            @content;
        }
    }
}

//Input Cursor
@mixin screen-mouse { /* mouse, touch pad */
    @media (hover: hover) and (pointer: fine) {
        @content;
    }
}
@mixin screen-stylus { /* stylus-based screens */
    @media (hover: none) and (pointer: fine) {
        @content;
    }
}
@mixin screen-touch { /* smartphones, touchscreens */
    @media (hover: none) and (pointer: coarse) { 
        @content;
    }
}
@mixin screen-controller { /* Nintendo Wii controller, Microsoft Kinect */
    @media (hover: hover) and (pointer: coarse) {
        @content;
    }
}

@mixin hover-mobile {
    @media (hover: none) {
        @content;
    }
}
@mixin hover-cursor {
    @media (hover: hover) {
        @content;
    }
}